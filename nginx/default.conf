upstream minicom_app {
    server minicom_main_system:8000;
}

server {
    listen 8080;
    server_name _;

    root /app;
    client_max_body_size 10000M;

    # Handle CORS preflight for all routes
    if ($request_method = OPTIONS ) {
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
        add_header Content-Length 0;
        add_header Content-Type text/plain;
        return 204;
    }

    location / {
        proxy_pass http://minicom_app;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, DELETE, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization";
    }

    location /static/ {
        alias /app/static/;
        access_log off;
        expires max;

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
    }

    location /media/ {
        alias /app/media/;
        access_log off;
        expires max;

        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
    }
}

# Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name dashboard.example.com www.dashboard.example.com;
#     return 301 https://$host$request_uri;
# }

# # HTTPS Server
# server {
#     listen 443 ssl;
#     server_name dashboard.example.com www.dashboard.example.com;
#     root /app;
#     client_max_body_size 10000M;

#     # SSL Configuration
#     ssl_certificate /etc/letsencrypt/live/dashboard.example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/dashboard.example.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

#     # Security headers
#     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

#     location / {
#         proxy_pass http://alta_app;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#         proxy_set_header Upgrade $http_upgrade;
#         proxy_set_header Connection "upgrade";
#     }

#     location /static/ {
#         alias /app/static/;
#         access_log off;
#         expires max;
#     }

#     location /media/ {
#         alias /app/media/;
#         access_log off;
#         expires max;
#     }

#     # certbot
#     location /.well-known/acme-challenge/ {
#         proxy_pass http://certbot:80;
#     }
# }