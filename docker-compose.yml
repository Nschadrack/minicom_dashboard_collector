services:
    postgres_db:
        image: postgres:latest
        volumes:
            - postgres_data:/var/lib/postgresql/data:Z  # Container data (persisting data)
            - ../postgres_data:/var/lib/postgresql/data  # Host-accessible data
            - ./postgres/initdb:/docker-entrypoint-initdb.d  # Init scripts
        environment:
            - POSTGRES_DB=${DB_NAME}
            - POSTGRES_USER=${DB_USER}
            - POSTGRES_PASSWORD=${DB_PASSWORD}
        expose:
            - 5432
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - postgres_network
            - app_net

    minicom_main_system:
        build:
            context: .
            dockerfile: Dockerfile
        environment:
            - PYTHONUNBUFFERED=1
            - DB_HOST=${DB_HOST}
            - DB_NAME=${DB_NAME}
            - DB_USER=${DB_USER}
            - DB_PASSWORD=${DB_PASSWORD}
        expose:
            - 8000
        ports:
            - "8080:8000"
        volumes:
            - static_volume:/app/static
            - root_volume:/app
            - ../Documents/media:/app/media
        env_file:
            - .env
        depends_on:
            postgres_db:
                condition: service_healthy
        networks:
            - postgres_network
            - minicom_main_system_network
            - app_net

    nginx:
        build: ./nginx
        volumes:
            - static_volume:/app/static
            - root_volume:/app
            - ../Documents/media:/app/media
        expose:
            - 80
        ports:
            - "80:80"
        depends_on:
            - minicom_main_system
        networks:
            - minicom_main_system_network
            - app_net

volumes:
    static_volume:
    root_volume:
    postgres_data:

networks:
  postgres_network: 
  minicom_main_system_network:
  app_net:
    external: true # Use the pre-existing network defined in openmetadata compose file to enable communication with services here
    name: app_net  # Must match the name in the compose file for openmetadata server